blueprint:
  name: ZHA - Philips Hue Tap Dial Switch (RDM002)
  author: DanielDeni
  description:
    "# Philips Hue Tap Dial Switch\n\n This blueprint enables comprehensive
    configuration of a Philips Hue Tap Dial Switch. Depending on the mode you select
    per button it will do different things.\n The dial can be used with each button,
    simply press the button you want to use and turn the dial to control it for that
    specific setting.\n When you select Lights or Media mode, certain actions for
    that button are already set and the Custom settings will be ignored for these
    actions"
  domain: automation
  homeassistant:
    min_version: 2024.10.0
  source_url: https://github.com/danielpetrovic/home-assistant-config/blob/main/blueprints/automation/danielpetrovic/zha-philips-hue-tap-dial-switch.yaml
  input:
    remote:
      name: Philips Hue Tap Dial Switch
      selector:
        device:
          entity:
            - domain:
                - sensor
              device_class:
                - battery
          filter:
            - integration: zha
              manufacturer: Signify Netherlands B.V.
              model: RDM002
          multiple: false
    last_pressed:
      name: Last Pressed Input Text Helper
      description:
        Create an input text helper within Home Assistant to keep track
        of the last button pressed. This will facilitate implementing different rotation
        actions based on the last button pressed. **Each switch requires a unique
        helper!**
      selector:
        entity:
          filter:
            - domain:
                - input_text
          multiple: false
    button_1_mode:
      name: Button 1 - Mode
      icon: mdi:numeric-1-circle-outline
      collapsed: false
      input:
        button_1_mode:
          name: Mode
          default: Custom
          description: Select which mode you want to use for this button.
          selector:
            select:
              options:
                - Custom
                - Lights
                - Media
              custom_value: false
              multiple: false
    button_1_custom:
      name: Button 1 - Settings for Custom Mode
      icon: mdi:cog-box
      collapsed: true
      input:
        button_1_press:
          name: Button 1 (Short Press) - Custom Action
          description: Action to run on a short press of Button 1
          default: []
          selector:
            action: {}
        button_1_short_release:
          name: Button 1 (Short Release) - Custom Action
          description: Action to run on a release of Button 1 after a short press
          default: []
          selector:
            action: {}
        button_1_hold:
          name: Button 1 (Long Press) - Custom Action
          description:
            Action to run on a long press of Button 1. Will repeat while
            the button is held
          default: []
          selector:
            action: {}
        button_1_long_release:
          name: Button 1 (Long Release) - Custom Action
          description: Action to run when Button 1 is released after a long press
          default: []
          selector:
            action: {}
        button_1_double:
          name: Button 1 (Double Press) - Lights/Custom Action
          description: Action to run on a double press of Button 1
          default: []
          selector:
            action: {}
        button_1_triple:
          name: Button 1 (Triple Press) - Lights/Custom Action
          description: Action to run on a triple press of Button 1
          default: []
          selector:
            action: {}
        button_1_quadruple:
          name: Button 1 (Quadruple Press) - Lights/Media/Custom Action
          description: Action to run on a quadruple press of Button 1
          default: []
          selector:
            action: {}
        button_1_quintuple:
          name: Button 1 (Quintuple Press) - Lights/Media/Custom Action
          description: Action to run on a quintuple press of Button 1
          default: []
          selector:
            action: {}
        button_1_rotate_left:
          name: Button 1 (Rotate Left) - Custom Action
          description:
            Action to run when dial is turned to the left after pressing
            Button 1
          default: []
          selector:
            action: {}
        button_1_rotate_right:
          name: Button 1 (Rotate Right) - Custom Action
          description:
            Action to run when dial is turned to the right after pressing
            Button 1
          default: []
          selector:
            action: {}
    button_1_lights:
      name: Button 1 - Settings for Lights Mode
      icon: mdi:lightbulb
      collapsed: true
      input:
        button_1_lights:
          name: Lights
          default: []
          description:
            The Lights to control with this button and selects the dial
            for dimming based on speed of rotation. Short Press turns Lights on following
            the schedule, Long Release turns Lights off
          selector:
            entity:
              filter:
                - domain:
                    - light
              multiple: true
        button_1_lights_schedule:
          name: Lights - Schedule
          default: []
          description:
            Create a schedule helper within Home Assistant to set presets
            for Lights. This will facilitate implementing different brightness and
            color temperatures across the day **Schedules can be reused between lights**
          selector:
            entity:
              filter:
                - domain:
                    - schedule
              multiple: false
    button_1_media:
      name: Button 1 - Settings for Media Mode
      icon: mdi:play-box
      collapsed: true
      input:
        button_1_media:
          name: Media Player
          default: []
          description:
            The media player to control with this button and the dial for
            volume. Short Press turns Media Player on, sets Start Volume and selects
            the dial for changing the volume based on speed of rotation, Long Release
            turns Media Player off
          selector:
            entity:
              filter:
                - domain:
                    - media_player
              multiple: false
        button_1_media_volume:
          name: Media Player - Start Volume
          default: 35
          description: The default volume for the media player.
          selector:
            number:
              min: 0.0
              max: 100.0
              step: 5.0
              unit_of_measurement: "%"
              mode: slider
    button_2_mode:
      name: Button 2 - Mode
      icon: mdi:numeric-2-circle-outline
      collapsed: false
      input:
        button_2_mode:
          name: Mode
          default: Custom
          description: Select which mode you want to use for this button.
          selector:
            select:
              options:
                - Custom
                - Lights
                - Media
              custom_value: false
              multiple: false
    button_2_custom:
      name: Button 2 - Settings for Custom Mode
      icon: mdi:cog-box
      collapsed: true
      input:
        button_2_press:
          name: Button 2 (Short Press) - Custom Action
          description: Action to run on a short press of Button 2
          default: []
          selector:
            action: {}
        button_2_short_release:
          name: Button 2 (Short Release) - Custom Action
          description: Action to run on a release of Button 2 after a short press
          default: []
          selector:
            action: {}
        button_2_hold:
          name: Button 2 (Long Press) - Custom Action
          description:
            Action to run on a long press of Button 2. Will repeat while
            the button is held
          default: []
          selector:
            action: {}
        button_2_long_release:
          name: Button 2 (Long Release) - Custom Action
          description: Action to run when Button 2 is released after a long press
          default: []
          selector:
            action: {}
        button_2_double:
          name: Button 2 (Double Press) - Lights/Custom Action
          description: Action to run on a double press of Button 2
          default: []
          selector:
            action: {}
        button_2_triple:
          name: Button 2 (Triple Press) - Lights/Custom Action
          description: Action to run on a triple press of Button 2
          default: []
          selector:
            action: {}
        button_2_quadruple:
          name: Button 2 (Quadruple Press) - Lights/Media/Custom Action
          description: Action to run on a quadruple press of Button 2
          default: []
          selector:
            action: {}
        button_2_quintuple:
          name: Button 2 (Quintuple Press) - Lights/Media/Custom Action
          description: Action to run on a quintuple press of Button 2
          default: []
          selector:
            action: {}
        button_2_rotate_left:
          name: Button 2 (Rotate Left) - Custom Action
          description:
            Action to run when dial is turned to the left after pressing
            Button 2
          default: []
          selector:
            action: {}
        button_2_rotate_right:
          name: Button 2 (Rotate Right) - Custom Action
          description:
            Action to run when dial is turned to the right after pressing
            Button 2
          default: []
          selector:
            action: {}
    button_2_lights:
      name: Button 2 - Settings for Lights Mode
      icon: mdi:lightbulb
      collapsed: true
      input:
        button_2_lights:
          name: Lights
          default: []
          description:
            The Lights to control with this button and selects the dial
            for dimming based on speed of rotation. Short Press turns Lights on following
            the schedule, Long Release turns Lights off
          selector:
            entity:
              filter:
                - domain:
                    - light
              multiple: true
        button_2_lights_schedule:
          name: Lights - Schedule
          default: []
          description:
            Create a schedule helper within Home Assistant to set presets
            for Lights. This will facilitate implementing different brightness and
            color temperatures across the day **Schedules can be reused between lights**
          selector:
            entity:
              filter:
                - domain:
                    - schedule
              multiple: false
    button_2_media:
      name: Button 2 - Settings for Media Mode
      icon: mdi:play-box
      collapsed: true
      input:
        button_2_media:
          name: Media Player
          default: []
          description:
            The media player to control with this button and the dial for
            volume. Short Press turns Media Player on, sets Start Volume and selects
            the dial for changing the volume based on speed of rotation, Long Release
            turns Media Player off
          selector:
            entity:
              filter:
                - domain:
                    - media_player
              multiple: false
        button_2_media_volume:
          name: Media Player - Start Volume
          default: 35
          description: The default volume for the media player.
          selector:
            number:
              min: 0.0
              max: 200.0
              step: 5.0
              unit_of_measurement: "%"
              mode: slider
    button_3_mode:
      name: Button 3 - Mode
      icon: mdi:numeric-3-circle-outline
      collapsed: false
      input:
        button_3_mode:
          name: Mode
          default: Custom
          description: Select which mode you want to use for this button.
          selector:
            select:
              options:
                - Custom
                - Lights
                - Media
              custom_value: false
              multiple: false
    button_3_custom:
      name: Button 3 - Settings for Custom Mode
      icon: mdi:cog-box
      collapsed: true
      input:
        button_3_press:
          name: Button 3 (Short Press) - Custom Action
          description: Action to run on a short press of Button 3
          default: []
          selector:
            action: {}
        button_3_short_release:
          name: Button 3 (Short Release) - Custom Action
          description: Action to run on a release of Button 3 after a short press
          default: []
          selector:
            action: {}
        button_3_hold:
          name: Button 3 (Long Press) - Custom Action
          description:
            Action to run on a long press of Button 3. Will repeat while
            the button is held
          default: []
          selector:
            action: {}
        button_3_long_release:
          name: Button 3 (Long Release) - Custom Action
          description: Action to run when Button 3 is released after a long press
          default: []
          selector:
            action: {}
        button_3_double:
          name: Button 3 (Double Press) - Lights/Custom Action
          description: Action to run on a double press of Button 3
          default: []
          selector:
            action: {}
        button_3_triple:
          name: Button 3 (Triple Press) - Lights/Custom Action
          description: Action to run on a triple press of Button 3
          default: []
          selector:
            action: {}
        button_3_quadruple:
          name: Button 3 (Quadruple Press) - Lights/Media/Custom Action
          description: Action to run on a quadruple press of Button 3
          default: []
          selector:
            action: {}
        button_3_quintuple:
          name: Button 3 (Quintuple Press) - Lights/Media/Custom Action
          description: Action to run on a quintuple press of Button 3
          default: []
          selector:
            action: {}
        button_3_rotate_left:
          name: Button 3 (Rotate Left) - Custom Action
          description:
            Action to run when dial is turned to the left after pressing
            Button 3
          default: []
          selector:
            action: {}
        button_3_rotate_right:
          name: Button 3 (Rotate Right) - Custom Action
          description:
            Action to run when dial is turned to the right after pressing
            Button 3
          default: []
          selector:
            action: {}
    button_3_lights:
      name: Button 3 - Settings for Lights Mode
      icon: mdi:lightbulb
      collapsed: true
      input:
        button_3_lights:
          name: Lights
          default: []
          description:
            The Lights to control with this button and selects the dial
            for dimming based on speed of rotation. Short Press turns Lights on following
            the schedule, Long Release turns Lights off
          selector:
            entity:
              filter:
                - domain:
                    - light
              multiple: true
        button_3_lights_schedule:
          name: Lights - Schedule
          default: []
          description:
            Create a schedule helper within Home Assistant to set presets
            for Lights. This will facilitate implementing different brightness and
            color temperatures across the day **Schedules can be reused between lights**
          selector:
            entity:
              filter:
                - domain:
                    - schedule
              multiple: false
    button_3_media:
      name: Button 3 - Settings for Media Mode
      icon: mdi:play-box
      collapsed: true
      input:
        button_3_media:
          name: Media Player
          default: []
          description:
            The media player to control with this button and the dial for
            volume. Short Press turns Media Player on, sets Start Volume and selects
            the dial for changing the volume based on speed of rotation, Long Release
            turns Media Player off
          selector:
            entity:
              filter:
                - domain:
                    - media_player
              multiple: false
        button_3_media_volume:
          name: Media Player - Start Volume
          default: 35
          description: The default volume for the media player.
          selector:
            number:
              min: 0.0
              max: 300.0
              step: 5.0
              unit_of_measurement: "%"
              mode: slider
    button_4_mode:
      name: Button 4 - Mode
      icon: mdi:numeric-4-circle-outline
      collapsed: false
      input:
        button_4_mode:
          name: Mode
          default: Custom
          description: Select which mode you want to use for this button.
          selector:
            select:
              options:
                - Custom
                - Lights
                - Media
              custom_value: false
              multiple: false
    button_4_custom:
      name: Button 4 - Settings for Custom Mode
      icon: mdi:cog-box
      collapsed: true
      input:
        button_4_press:
          name: Button 4 (Short Press) - Custom Action
          description: Action to run on a short press of Button 4
          default: []
          selector:
            action: {}
        button_4_short_release:
          name: Button 4 (Short Release) - Custom Action
          description: Action to run on a release of Button 4 after a short press
          default: []
          selector:
            action: {}
        button_4_hold:
          name: Button 4 (Long Press) - Custom Action
          description:
            Action to run on a long press of Button 4. Will repeat while
            the button is held
          default: []
          selector:
            action: {}
        button_4_long_release:
          name: Button 4 (Long Release) - Custom Action
          description: Action to run when Button 4 is released after a long press
          default: []
          selector:
            action: {}
        button_4_double:
          name: Button 4 (Double Press) - Lights/Custom Action
          description: Action to run on a double press of Button 4
          default: []
          selector:
            action: {}
        button_4_triple:
          name: Button 4 (Triple Press) - Lights/Custom Action
          description: Action to run on a triple press of Button 4
          default: []
          selector:
            action: {}
        button_4_quadruple:
          name: Button 4 (Quadruple Press) - Lights/Media/Custom Action
          description: Action to run on a quadruple press of Button 4
          default: []
          selector:
            action: {}
        button_4_quintuple:
          name: Button 4 (Quintuple Press) - Lights/Media/Custom Action
          description: Action to run on a quintuple press of Button 4
          default: []
          selector:
            action: {}
        button_4_rotate_left:
          name: Button 4 (Rotate Left) - Custom Action
          description:
            Action to run when dial is turned to the left after pressing
            Button 4
          default: []
          selector:
            action: {}
        button_4_rotate_right:
          name: Button 4 (Rotate Right) - Custom Action
          description:
            Action to run when dial is turned to the right after pressing
            Button 4
          default: []
          selector:
            action: {}
    button_4_lights:
      name: Button 4 - Settings for Lights Mode
      icon: mdi:lightbulb
      collapsed: true
      input:
        button_4_lights:
          name: Lights
          default: []
          description:
            The Lights to control with this button and selects the dial
            for dimming based on speed of rotation. Short Press turns Lights on following
            the schedule, Long Release turns Lights off
          selector:
            entity:
              filter:
                - domain:
                    - light
              multiple: true
        button_4_lights_schedule:
          name: Lights - Schedule
          default: []
          description:
            Create a schedule helper within Home Assistant to set presets
            for Lights. This will facilitate implementing different brightness and
            color temperatures across the day **Schedules can be reused between lights**
          selector:
            entity:
              filter:
                - domain:
                    - schedule
              multiple: false
    button_4_media:
      name: Button 4 - Settings for Media Mode
      icon: mdi:play-box
      collapsed: true
      input:
        button_4_media:
          name: Media Player
          default: []
          description:
            The media player to control with this button and the dial for
            volume. Short Press turns Media Player on, sets Start Volume and selects
            the dial for changing the volume based on speed of rotation, Long Release
            turns Media Player off
          selector:
            entity:
              filter:
                - domain:
                    - media_player
              multiple: false
        button_4_media_volume:
          name: Media Player - Start Volume
          default: 35
          description: The default volume for the media player.
          selector:
            number:
              min: 0.0
              max: 400.0
              step: 5.0
              unit_of_measurement: "%"
              mode: slider
mode: restart
max_exceeded: silent
trigger:
  - trigger: event
    event_type: zha_event
    event_data:
      device_id: !input remote
action:
  - variables:
      command: "{{ trigger.event.data.command }}"
      args: "{{ trigger.event.data.args }}"
      params: "{{ trigger.event.data.params }}"
      step_mode: "{{ trigger.event.data.params.step_mode | default('0') }}"
      step_size: "{{ trigger.event.data.params.step_size | default('0') }}"
      button_1_mode: !input button_1_mode
      button_1_lights: !input button_1_lights
      button_1_lights_schedule: !input button_1_lights_schedule
      button_1_media: !input button_1_media
      button_1_media_volume: !input button_1_media_volume
      button_2_mode: !input button_2_mode
      button_2_lights: !input button_2_lights
      button_2_lights_schedule: !input button_2_lights_schedule
      button_2_media: !input button_2_media
      button_2_media_volume: !input button_2_media_volume
      button_3_mode: !input button_3_mode
      button_3_lights: !input button_3_lights
      button_3_lights_schedule: !input button_3_lights_schedule
      button_3_media: !input button_3_media
      button_3_media_volume: !input button_3_media_volume
      button_4_mode: !input button_4_mode
      button_4_lights: !input button_4_lights
      button_4_lights_schedule: !input button_4_lights_schedule
      button_4_media: !input button_4_media
      button_4_media_volume: !input button_4_media_volume
      last_pressed: !input last_pressed
      remote: !input remote
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ command | regex_search('button_[1-4]') }}"
        alias: input_text.set_value
        sequence:
          - action: input_text.set_value
            data:
              value: "{{ command | regex_replace(find='[^1-4]', replace='') }}"
            target:
              entity_id: "{{ last_pressed }}"
  - choose:
      - conditions: "{{ button_1_mode == 'Custom' }}"
        alias: Button 1 Custom mode
        sequence:
          - choose:
              - conditions: "{{ command == 'button_1_press' }}"
                alias: button_1_press
                sequence: !input button_1_press
              - conditions: "{{ command == 'button_1_short_release' }}"
                alias: button_1_short_release
                sequence: !input button_1_short_release
              - conditions: "{{ command == 'button_1_hold' }}"
                alias: button_1_hold
                sequence: !input button_1_hold
              - conditions: "{{ command == 'button_1_long_release' }}"
                alias: button_1_long_release
                sequence: !input button_1_long_release
              - conditions: "{{ command == 'button_1_double_press' }}"
                alias: button_1_double
                sequence: !input button_1_double
              - conditions: "{{ command == 'button_1_triple_press' }}"
                alias: button_1_triple
                sequence: !input button_1_triple
              - conditions: "{{ command == 'button_1_quadruple_press' }}"
                alias: button_1_quadruple
                sequence: !input button_1_quadruple
              - conditions: "{{ command == 'button_1_quintuple_press' }}"
                alias: button_1_quintuple
                sequence: !input button_1_quintuple
              - conditions:
                  "{{ command == 'step_with_on_off' and states(last_pressed) ==
                  '1' }}"
                alias: button_1_rotate
                sequence:
                  - choose:
                      - conditions: "{{ step_mode == 'StepMode.Down' and step_size != 255 }}"
                        alias: button_1_rotate_left
                        sequence: !input button_1_rotate_left
                      - conditions: "{{ step_mode == 'StepMode.Up' }}"
                        alias: button_1_rotate_right
                        sequence: !input button_1_rotate_right
      - conditions: "{{ button_1_mode == 'Lights' }}"
        alias: Button 1 Lights mode
        sequence:
          - variables:
              brightness_pct:
                "{{ state_attr(button_1_lights_schedule, 'brightness_pct')
                }}"
              color_temp_kelvin:
                "{{ state_attr(button_1_lights_schedule, 'color_temp_kelvin')
                }}"
          - choose:
              - conditions: "{{ command == 'button_1_press' }}"
                alias: button_1_press
                sequence: []
              - conditions: "{{ command == 'button_1_short_release' }}"
                alias: button_1_short_release
                sequence:
                  action: light.turn_on
                  data:
                    brightness_pct: "{{ brightness_pct }}"
                    color_temp_kelvin: "{{ color_temp_kelvin }}"
                  target:
                    entity_id: !input button_1_lights
              - conditions: "{{ command == 'button_1_hold' }}"
                alias: button_1_hold
                sequence: []
              - conditions: "{{ command == 'button_1_long_release' }}"
                alias: button_1_long_release
                sequence:
                  action: light.turn_off
                  data: {}
                  target:
                    entity_id: !input button_1_lights
              - conditions: "{{ command == 'button_1_double_press' }}"
                alias: button_1_double
                sequence: !input button_1_double
              - conditions: "{{ command == 'button_1_triple_press' }}"
                alias: button_1_triple
                sequence: !input button_1_triple
              - conditions: "{{ command == 'button_1_quadruple_press' }}"
                alias: button_1_quadruple
                sequence: !input button_1_quadruple
              - conditions: "{{ command == 'button_1_quintuple_press' }}"
                alias: button_1_quintuple
                sequence: !input button_1_quintuple
              - conditions:
                  "{{ command == 'step_with_on_off' and states(last_pressed) ==
                  '1' }}"
                alias: button_1_rotate
                sequence:
                  - choose:
                      - conditions: "{{ step_mode == 'StepMode.Down' and step_size != 255 }}"
                        alias: button_1_rotate_left
                        sequence:
                          action: light.turn_on
                          data:
                            brightness_step: -{{ step_size }}
                            transition: 1
                          target:
                            entity_id: !input button_1_lights
                      - conditions: "{{ step_mode == 'StepMode.Up' }}"
                        alias: button_1_rotate_right
                        sequence:
                          action: light.turn_on
                          data:
                            brightness_step: "{{ step_size }}"
                            transition: 1
                          target:
                            entity_id: !input button_1_lights
      - conditions: "{{ button_1_mode == 'Media' }}"
        alias: Button 1 Media mode
        sequence:
          - variables:
              current_volume: "{{ state_attr(button_1_media, 'volume_level') }}"
              start_volume: "{{ button_1_media_volume }}"
          - choose:
              - conditions: "{{ command == 'button_1_press' }}"
                alias: button_1_press
                sequence: []
              - conditions: "{{ command == 'button_1_short_release' }}"
                alias: button_1_short_release
                sequence:
                  - action: media_player.turn_on
                    entity_id: !input button_1_media
                  - action: media_player.volume_set
                    data:
                      volume_level: "{{( start_volume / 100 )}}"
                    entity_id: !input button_1_media
              - conditions: "{{ command == 'button_1_hold' }}"
                alias: button_1_hold
                sequence: []
              - conditions: "{{ command == 'button_1_long_release' }}"
                alias: button_1_long_release
                sequence:
                  action: media_player.turn_off
                  entity_id: !input button_1_media
              - conditions: "{{ command == 'button_1_double_press' }}"
                alias: button_1_double
                sequence:
                  action: media_player.media_next_track
                  entity_id: !input button_1_media
              - conditions: "{{ command == 'button_1_triple_press' }}"
                alias: button_1_triple
                sequence:
                  action: media_player.media_previous_track
                  entity_id: !input button_1_media
              - conditions: "{{ command == 'button_1_quadruple_press' }}"
                alias: button_1_quadruple
                sequence: !input button_1_quadruple
              - conditions: "{{ command == 'button_1_quintuple_press' }}"
                alias: button_1_quintuple
                sequence: !input button_1_quintuple
              - conditions:
                  "{{ command == 'step_with_on_off' and states(last_pressed) ==
                  '1' }}"
                alias: button_1_rotate
                sequence:
                  - choose:
                      - conditions: "{{ step_mode == 'StepMode.Down' and step_size != 255 }}"
                        alias: button_1_rotate_left
                        sequence:
                          - action: media_player.volume_set
                            data:
                              volume_level:
                                "{% set new_volume = current_volume - ( (step_size /
                                8) / 100)%} {{ 0.0 if new_volume < 0.0 else new_volume }}"
                            entity_id: !input button_1_media
                      - conditions: "{{ step_mode == 'StepMode.Up' }}"
                        alias: button_1_rotate_right
                        sequence:
                          - action: media_player.volume_set
                            data:
                              volume_level:
                                "{% set new_volume = current_volume + ( (step_size /
                                8) / 100)%} {{ 1.0 if new_volume > 1.0 else new_volume }}"
                            entity_id: !input button_1_media
  - choose:
      - conditions: "{{ button_2_mode == 'Custom' }}"
        alias: Button 2 Custom mode
        sequence:
          - choose:
              - conditions: "{{ command == 'button_2_press' }}"
                alias: button_2_press
                sequence: !input button_2_press
              - conditions: "{{ command == 'button_2_short_release' }}"
                alias: button_2_short_release
                sequence: !input button_2_short_release
              - conditions: "{{ command == 'button_2_hold' }}"
                alias: button_2_hold
                sequence: !input button_2_hold
              - conditions: "{{ command == 'button_2_long_release' }}"
                alias: button_2_long_release
                sequence: !input button_2_long_release
              - conditions: "{{ command == 'button_2_double_press' }}"
                alias: button_2_double
                sequence: !input button_2_double
              - conditions: "{{ command == 'button_2_triple_press' }}"
                alias: button_2_triple
                sequence: !input button_2_triple
              - conditions: "{{ command == 'button_2_quadruple_press' }}"
                alias: button_2_quadruple
                sequence: !input button_2_quadruple
              - conditions: "{{ command == 'button_2_quintuple_press' }}"
                alias: button_2_quintuple
                sequence: !input button_2_quintuple
              - conditions:
                  "{{ command == 'step_with_on_off' and states(last_pressed) ==
                  '2' }}"
                alias: button_2_rotate
                sequence:
                  - choose:
                      - conditions: "{{ step_mode == 'StepMode.Down' and step_size != 255 }}"
                        alias: button_2_rotate_left
                        sequence: !input button_2_rotate_left
                      - conditions: "{{ step_mode == 'StepMode.Up' }}"
                        alias: button_2_rotate_right
                        sequence: !input button_2_rotate_right
      - conditions: "{{ button_2_mode == 'Lights' }}"
        alias: Button 2 Lights mode
        sequence:
          - variables:
              brightness_pct:
                "{{ state_attr(button_2_lights_schedule, 'brightness_pct')
                }}"
              color_temp_kelvin:
                "{{ state_attr(button_2_lights_schedule, 'color_temp_kelvin')
                }}"
          - choose:
              - conditions: "{{ command == 'button_2_press' }}"
                alias: button_2_press
                sequence: []
              - conditions: "{{ command == 'button_2_short_release' }}"
                alias: button_2_short_release
                sequence:
                  action: light.turn_on
                  data:
                    brightness_pct: "{{ brightness_pct }}"
                    color_temp_kelvin: "{{ color_temp_kelvin }}"
                  target:
                    entity_id: !input button_2_lights
              - conditions: "{{ command == 'button_2_hold' }}"
                alias: button_2_hold
                sequence: []
              - conditions: "{{ command == 'button_2_long_release' }}"
                alias: button_2_long_release
                sequence:
                  action: light.turn_off
                  data: {}
                  target:
                    entity_id: !input button_2_lights
              - conditions: "{{ command == 'button_2_double_press' }}"
                alias: button_2_double
                sequence: !input button_2_double
              - conditions: "{{ command == 'button_2_triple_press' }}"
                alias: button_2_triple
                sequence: !input button_2_triple
              - conditions: "{{ command == 'button_2_quadruple_press' }}"
                alias: button_2_quadruple
                sequence: !input button_2_quadruple
              - conditions: "{{ command == 'button_2_quintuple_press' }}"
                alias: button_2_quintuple
                sequence: !input button_2_quintuple
              - conditions:
                  "{{ command == 'step_with_on_off' and states(last_pressed) ==
                  '2' }}"
                alias: button_2_rotate
                sequence:
                  - choose:
                      - conditions: "{{ step_mode == 'StepMode.Down' and step_size != 255 }}"
                        alias: button_2_rotate_left
                        sequence:
                          action: light.turn_on
                          data:
                            brightness_step: -{{ step_size }}
                            transition: 2
                          target:
                            entity_id: !input button_2_lights
                      - conditions: "{{ step_mode == 'StepMode.Up' }}"
                        alias: button_2_rotate_right
                        sequence:
                          action: light.turn_on
                          data:
                            brightness_step: "{{ step_size }}"
                            transition: 2
                          target:
                            entity_id: !input button_2_lights
      - conditions: "{{ button_2_mode == 'Media' }}"
        alias: Button 2 Media mode
        sequence:
          - variables:
              current_volume: "{{ state_attr(button_2_media, 'volume_level') }}"
              start_volume: "{{ button_2_media_volume }}"
          - choose:
              - conditions: "{{ command == 'button_2_press' }}"
                alias: button_2_press
                sequence: []
              - conditions: "{{ command == 'button_2_short_release' }}"
                alias: button_2_short_release
                sequence:
                  - action: media_player.turn_on
                    entity_id: !input button_2_media
                  - action: media_player.volume_set
                    data:
                      volume_level: "{{( start_volume / 100 )}}"
                    entity_id: !input button_2_media
              - conditions: "{{ command == 'button_2_hold' }}"
                alias: button_2_hold
                sequence: []
              - conditions: "{{ command == 'button_2_long_release' }}"
                alias: button_2_long_release
                sequence:
                  action: media_player.turn_off
                  entity_id: !input button_2_media
              - conditions: "{{ command == 'button_2_double_press' }}"
                alias: button_2_double
                sequence:
                  action: media_player.media_next_track
                  entity_id: !input button_2_media
              - conditions: "{{ command == 'button_2_triple_press' }}"
                alias: button_2_triple
                sequence:
                  action: media_player.media_previous_track
                  entity_id: !input button_2_media
              - conditions: "{{ command == 'button_2_quadruple_press' }}"
                alias: button_2_quadruple
                sequence: !input button_2_quadruple
              - conditions: "{{ command == 'button_2_quintuple_press' }}"
                alias: button_2_quintuple
                sequence: !input button_2_quintuple
              - conditions:
                  "{{ command == 'step_with_on_off' and states(last_pressed) ==
                  '2' }}"
                alias: button_2_rotate
                sequence:
                  - choose:
                      - conditions: "{{ step_mode == 'StepMode.Down' and step_size != 255 }}"
                        alias: button_2_rotate_left
                        sequence:
                          - action: media_player.volume_set
                            data:
                              volume_level:
                                "{% set new_volume = current_volume - ( (step_size /
                                8) / 100)%} {{ 0.0 if new_volume < 0.0 else new_volume }}"
                            entity_id: !input button_2_media
                      - conditions: "{{ step_mode == 'StepMode.Up' }}"
                        alias: button_2_rotate_right
                        sequence:
                          - action: media_player.volume_set
                            data:
                              volume_level:
                                "{% set new_volume = current_volume + ( (step_size /
                                8) / 100)%} {{ 1.0 if new_volume > 1.0 else new_volume }}"
                            entity_id: !input button_2_media
  - choose:
      - conditions: "{{ button_3_mode == 'Custom' }}"
        alias: Button 3 Custom mode
        sequence:
          - choose:
              - conditions: "{{ command == 'button_3_press' }}"
                alias: button_3_press
                sequence: !input button_3_press
              - conditions: "{{ command == 'button_3_short_release' }}"
                alias: button_3_short_release
                sequence: !input button_3_short_release
              - conditions: "{{ command == 'button_3_hold' }}"
                alias: button_3_hold
                sequence: !input button_3_hold
              - conditions: "{{ command == 'button_3_long_release' }}"
                alias: button_3_long_release
                sequence: !input button_3_long_release
              - conditions: "{{ command == 'button_3_double_press' }}"
                alias: button_3_double
                sequence: !input button_3_double
              - conditions: "{{ command == 'button_3_triple_press' }}"
                alias: button_3_triple
                sequence: !input button_3_triple
              - conditions: "{{ command == 'button_3_quadruple_press' }}"
                alias: button_3_quadruple
                sequence: !input button_3_quadruple
              - conditions: "{{ command == 'button_3_quintuple_press' }}"
                alias: button_3_quintuple
                sequence: !input button_3_quintuple
              - conditions:
                  "{{ command == 'step_with_on_off' and states(last_pressed) ==
                  '3' }}"
                alias: button_3_rotate
                sequence:
                  - choose:
                      - conditions: "{{ step_mode == 'StepMode.Down' and step_size != 255 }}"
                        alias: button_3_rotate_left
                        sequence: !input button_3_rotate_left
                      - conditions: "{{ step_mode == 'StepMode.Up' }}"
                        alias: button_3_rotate_right
                        sequence: !input button_3_rotate_right
      - conditions: "{{ button_3_mode == 'Lights' }}"
        alias: Button 3 Lights mode
        sequence:
          - variables:
              brightness_pct:
                "{{ state_attr(button_3_lights_schedule, 'brightness_pct')
                }}"
              color_temp_kelvin:
                "{{ state_attr(button_3_lights_schedule, 'color_temp_kelvin')
                }}"
          - choose:
              - conditions: "{{ command == 'button_3_press' }}"
                alias: button_3_press
                sequence: []
              - conditions: "{{ command == 'button_3_short_release' }}"
                alias: button_3_short_release
                sequence:
                  action: light.turn_on
                  data:
                    brightness_pct: "{{ brightness_pct }}"
                    color_temp_kelvin: "{{ color_temp_kelvin }}"
                  target:
                    entity_id: !input button_3_lights
              - conditions: "{{ command == 'button_3_hold' }}"
                alias: button_3_hold
                sequence: []
              - conditions: "{{ command == 'button_3_long_release' }}"
                alias: button_3_long_release
                sequence:
                  action: light.turn_off
                  data: {}
                  target:
                    entity_id: !input button_3_lights
              - conditions: "{{ command == 'button_3_double_press' }}"
                alias: button_3_double
                sequence: !input button_3_double
              - conditions: "{{ command == 'button_3_triple_press' }}"
                alias: button_3_triple
                sequence: !input button_3_triple
              - conditions: "{{ command == 'button_3_quadruple_press' }}"
                alias: button_3_quadruple
                sequence: !input button_3_quadruple
              - conditions: "{{ command == 'button_3_quintuple_press' }}"
                alias: button_3_quintuple
                sequence: !input button_3_quintuple
              - conditions:
                  "{{ command == 'step_with_on_off' and states(last_pressed) ==
                  '3' }}"
                alias: button_3_rotate
                sequence:
                  - choose:
                      - conditions: "{{ step_mode == 'StepMode.Down' and step_size != 255 }}"
                        alias: button_3_rotate_left
                        sequence:
                          action: light.turn_on
                          data:
                            brightness_step: -{{ step_size }}
                            transition: 3
                          target:
                            entity_id: !input button_3_lights
                      - conditions: "{{ step_mode == 'StepMode.Up' }}"
                        alias: button_3_rotate_right
                        sequence:
                          action: light.turn_on
                          data:
                            brightness_step: "{{ step_size }}"
                            transition: 3
                          target:
                            entity_id: !input button_3_lights
      - conditions: "{{ button_3_mode == 'Media' }}"
        alias: Button 3 Media mode
        sequence:
          - variables:
              current_volume: "{{ state_attr(button_3_media, 'volume_level') }}"
              start_volume: "{{ button_3_media_volume }}"
          - choose:
              - conditions: "{{ command == 'button_3_press' }}"
                alias: button_3_press
                sequence: []
              - conditions: "{{ command == 'button_3_short_release' }}"
                alias: button_3_short_release
                sequence:
                  - action: media_player.turn_on
                    entity_id: !input button_3_media
                  - action: media_player.volume_set
                    data:
                      volume_level: "{{( start_volume / 100 )}}"
                    entity_id: !input button_3_media
              - conditions: "{{ command == 'button_3_hold' }}"
                alias: button_3_hold
                sequence: []
              - conditions: "{{ command == 'button_3_long_release' }}"
                alias: button_3_long_release
                sequence:
                  action: media_player.turn_off
                  entity_id: !input button_3_media
              - conditions: "{{ command == 'button_3_double_press' }}"
                alias: button_3_double
                sequence:
                  action: media_player.media_next_track
                  entity_id: !input button_3_media
              - conditions: "{{ command == 'button_3_triple_press' }}"
                alias: button_3_triple
                sequence:
                  action: media_player.media_previous_track
                  entity_id: !input button_3_media
              - conditions: "{{ command == 'button_3_quadruple_press' }}"
                alias: button_3_quadruple
                sequence: !input button_3_quadruple
              - conditions: "{{ command == 'button_3_quintuple_press' }}"
                alias: button_3_quintuple
                sequence: !input button_3_quintuple
              - conditions:
                  "{{ command == 'step_with_on_off' and states(last_pressed) ==
                  '3' }}"
                alias: button_3_rotate
                sequence:
                  - choose:
                      - conditions: "{{ step_mode == 'StepMode.Down' and step_size != 255 }}"
                        alias: button_3_rotate_left
                        sequence:
                          - action: media_player.volume_set
                            data:
                              volume_level:
                                "{% set new_volume = current_volume - ( (step_size /
                                8) / 100)%} {{ 0.0 if new_volume < 0.0 else new_volume }}"
                            entity_id: !input button_3_media
                      - conditions: "{{ step_mode == 'StepMode.Up' }}"
                        alias: button_3_rotate_right
                        sequence:
                          - action: media_player.volume_set
                            data:
                              volume_level:
                                "{% set new_volume = current_volume + ( (step_size /
                                8) / 100)%} {{ 1.0 if new_volume > 1.0 else new_volume }}"
                            entity_id: !input button_3_media
  - choose:
      - conditions: "{{ button_4_mode == 'Custom' }}"
        alias: Button 4 Custom mode
        sequence:
          - choose:
              - conditions: "{{ command == 'button_4_press' }}"
                alias: button_4_press
                sequence: !input button_4_press
              - conditions: "{{ command == 'button_4_short_release' }}"
                alias: button_4_short_release
                sequence: !input button_4_short_release
              - conditions: "{{ command == 'button_4_hold' }}"
                alias: button_4_hold
                sequence: !input button_4_hold
              - conditions: "{{ command == 'button_4_long_release' }}"
                alias: button_4_long_release
                sequence: !input button_4_long_release
              - conditions: "{{ command == 'button_4_double_press' }}"
                alias: button_4_double
                sequence: !input button_4_double
              - conditions: "{{ command == 'button_4_triple_press' }}"
                alias: button_4_triple
                sequence: !input button_4_triple
              - conditions: "{{ command == 'button_4_quadruple_press' }}"
                alias: button_4_quadruple
                sequence: !input button_4_quadruple
              - conditions: "{{ command == 'button_4_quintuple_press' }}"
                alias: button_4_quintuple
                sequence: !input button_4_quintuple
              - conditions:
                  "{{ command == 'step_with_on_off' and states(last_pressed) ==
                  '4' }}"
                alias: button_4_rotate
                sequence:
                  - choose:
                      - conditions: "{{ step_mode == 'StepMode.Down' and step_size != 255 }}"
                        alias: button_4_rotate_left
                        sequence: !input button_4_rotate_left
                      - conditions: "{{ step_mode == 'StepMode.Up' }}"
                        alias: button_4_rotate_right
                        sequence: !input button_4_rotate_right
      - conditions: "{{ button_4_mode == 'Lights' }}"
        alias: Button 4 Lights mode
        sequence:
          - variables:
              brightness_pct:
                "{{ state_attr(button_4_lights_schedule, 'brightness_pct')
                }}"
              color_temp_kelvin:
                "{{ state_attr(button_4_lights_schedule, 'color_temp_kelvin')
                }}"
          - choose:
              - conditions: "{{ command == 'button_4_press' }}"
                alias: button_4_press
                sequence: []
              - conditions: "{{ command == 'button_4_short_release' }}"
                alias: button_4_short_release
                sequence:
                  action: light.turn_on
                  data:
                    brightness_pct: "{{ brightness_pct }}"
                    color_temp_kelvin: "{{ color_temp_kelvin }}"
                  target:
                    entity_id: !input button_4_lights
              - conditions: "{{ command == 'button_4_hold' }}"
                alias: button_4_hold
                sequence: []
              - conditions: "{{ command == 'button_4_long_release' }}"
                alias: button_4_long_release
                sequence:
                  action: light.turn_off
                  data: {}
                  target:
                    entity_id: !input button_4_lights
              - conditions: "{{ command == 'button_4_double_press' }}"
                alias: button_4_double
                sequence: !input button_4_double
              - conditions: "{{ command == 'button_4_triple_press' }}"
                alias: button_4_triple
                sequence: !input button_4_triple
              - conditions: "{{ command == 'button_4_quadruple_press' }}"
                alias: button_4_quadruple
                sequence: !input button_4_quadruple
              - conditions: "{{ command == 'button_4_quintuple_press' }}"
                alias: button_4_quintuple
                sequence: !input button_4_quintuple
              - conditions:
                  "{{ command == 'step_with_on_off' and states(last_pressed) ==
                  '4' }}"
                alias: button_4_rotate
                sequence:
                  - choose:
                      - conditions: "{{ step_mode == 'StepMode.Down' and step_size != 255 }}"
                        alias: button_4_rotate_left
                        sequence:
                          action: light.turn_on
                          data:
                            brightness_step: -{{ step_size }}
                            transition: 4
                          target:
                            entity_id: !input button_4_lights
                      - conditions: "{{ step_mode == 'StepMode.Up' }}"
                        alias: button_4_rotate_right
                        sequence:
                          action: light.turn_on
                          data:
                            brightness_step: "{{ step_size }}"
                            transition: 4
                          target:
                            entity_id: !input button_4_lights
      - conditions: "{{ button_4_mode == 'Media' }}"
        alias: Button 4 Media mode
        sequence:
          - variables:
              current_volume: "{{ state_attr(button_4_media, 'volume_level') }}"
              start_volume: "{{ button_4_media_volume }}"
          - choose:
              - conditions: "{{ command == 'button_4_press' }}"
                alias: button_4_press
                sequence: []
              - conditions: "{{ command == 'button_4_short_release' }}"
                alias: button_4_short_release
                sequence:
                  - action: media_player.turn_on
                    entity_id: !input button_4_media
                  - action: media_player.volume_set
                    data:
                      volume_level: "{{( start_volume / 100 )}}"
                    entity_id: !input button_4_media
              - conditions: "{{ command == 'button_4_hold' }}"
                alias: button_4_hold
                sequence: []
              - conditions: "{{ command == 'button_4_long_release' }}"
                alias: button_4_long_release
                sequence:
                  action: media_player.turn_off
                  entity_id: !input button_4_media
              - conditions: "{{ command == 'button_4_double_press' }}"
                alias: button_4_double
                sequence:
                  action: media_player.media_next_track
                  entity_id: !input button_4_media
              - conditions: "{{ command == 'button_4_triple_press' }}"
                alias: button_4_triple
                sequence:
                  action: media_player.media_previous_track
                  entity_id: !input button_4_media
              - conditions: "{{ command == 'button_4_quadruple_press' }}"
                alias: button_4_quadruple
                sequence: !input button_4_quadruple
              - conditions: "{{ command == 'button_4_quintuple_press' }}"
                alias: button_4_quintuple
                sequence: !input button_4_quintuple
              - conditions:
                  "{{ command == 'step_with_on_off' and states(last_pressed) ==
                  '4' }}"
                alias: button_4_rotate
                sequence:
                  - choose:
                      - conditions: "{{ step_mode == 'StepMode.Down' and step_size != 255 }}"
                        alias: button_4_rotate_left
                        sequence:
                          - action: media_player.volume_set
                            data:
                              volume_level:
                                "{% set new_volume = current_volume - ( (step_size /
                                8) / 100)%} {{ 0.0 if new_volume < 0.0 else new_volume }}"
                            entity_id: !input button_4_media
                      - conditions: "{{ step_mode == 'StepMode.Up' }}"
                        alias: button_4_rotate_right
                        sequence:
                          - action: media_player.volume_set
                            data:
                              volume_level:
                                "{% set new_volume = current_volume + ( (step_size /
                                8) / 100)%} {{ 1.0 if new_volume > 1.0 else new_volume }}"
                            entity_id: !input button_4_media
